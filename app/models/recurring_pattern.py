# File: app/models/recurring_pattern.py
# New file for the RecurringPattern model, separated from journal_entry.py
from sqlalchemy import Column, Integer, String, Boolean, ForeignKey, Text, DateTime, Date, CheckConstraint
from sqlalchemy.orm import relationship, Mapped, mapped_column
from sqlalchemy.sql import func
from typing import Optional
import datetime

from app.models.base import Base, TimestampMixin, UserAuditMixin
# from app.models.journal_entry import JournalEntry # Avoid circular import - use string for type hint

class RecurringPattern(Base, TimestampMixin, UserAuditMixin):
    __tablename__ = 'recurring_patterns'
    __table_args__ = (
        CheckConstraint("frequency IN ('Daily', 'Weekly', 'Monthly', 'Quarterly', 'Yearly')", name='ck_recurring_patterns_frequency'),
        CheckConstraint("day_of_month BETWEEN 1 AND 31", name='ck_recurring_patterns_day_of_month'),
        CheckConstraint("day_of_week BETWEEN 0 AND 6", name='ck_recurring_patterns_day_of_week'),
        {'schema': 'accounting'}
    )

    id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)
    name: Mapped[str] = mapped_column(String(100), nullable=False)
    description: Mapped[Optional[str]] = mapped_column(Text, nullable=True) # New
    # FK to journal_entries.id; this is the JE that acts as a template.
    template_entry_id: Mapped[int] = mapped_column(Integer, ForeignKey('accounting.journal_entries.id'), nullable=False)
    
    frequency: Mapped[str] = mapped_column(String(20), nullable=False) # New
    interval_value: Mapped[int] = mapped_column(Integer, default=1, nullable=False) # New
    start_date: Mapped[datetime.date] = mapped_column(Date, nullable=False) # Was in old model
    end_date: Mapped[Optional[datetime.date]] = mapped_column(Date, nullable=True) # Was in old model
    
    day_of_month: Mapped[Optional[int]] = mapped_column(Integer, nullable=True) # New
    day_of_week: Mapped[Optional[int]] = mapped_column(Integer, nullable=True) # New
    
    last_generated_date: Mapped[Optional[datetime.date]] = mapped_column(Date, nullable=True) # Was in old model
    next_generation_date: Mapped[Optional[datetime.date]] = mapped_column(Date, nullable=True) # New
    
    is_active: Mapped[bool] = mapped_column(Boolean, default=True) # Was in old model
    
    created_by: Mapped[int] = mapped_column(Integer, ForeignKey('core.users.id'), nullable=False)
    updated_by: Mapped[int] = mapped_column(Integer, ForeignKey('core.users.id'), nullable=False)

    template_journal_entry: Mapped["JournalEntry"] = relationship("JournalEntry", foreign_keys=[template_entry_id]) # type: ignore
    # Relationship for journal entries generated by this pattern:
    # generated_journal_entries: Mapped[List["JournalEntry"]] = relationship("JournalEntry", back_populates="generated_from_pattern") # Defined on JE
