# File: tests/unit/services/test_sales_invoice_service.py
import pytest
from unittest.mock import AsyncMock, MagicMock
from typing import List, Optional
from decimal import Decimal
from datetime import date, datetime

from app.services.business_services import SalesInvoiceService
from app.models.business.sales_invoice import SalesInvoice, SalesInvoiceLine
from app.models.business.customer import Customer
from app.core.database_manager import DatabaseManager
from app.core.application_core import ApplicationCore
from app.utils.pydantic_models import SalesInvoiceSummaryData
from app.common.enums import InvoiceStatusEnum
import logging # For logger spec

# Mark all tests in this module as asyncio
pytestmark = pytest.mark.asyncio

@pytest.fixture
def mock_session() -> AsyncMock:
    session = AsyncMock()
    session.get = AsyncMock()
    session.execute = AsyncMock()
    session.add = MagicMock()
    session.delete = MagicMock()
    session.flush = AsyncMock()
    session.refresh = AsyncMock()
    return session

@pytest.fixture
def mock_db_manager(mock_session: AsyncMock) -> MagicMock:
    db_manager = MagicMock(spec=DatabaseManager)
    db_manager.session.return_value.__aenter__.return_value = mock_session
    db_manager.session.return_value.__aexit__.return_value = None
    return db_manager

@pytest.fixture
def mock_app_core() -> MagicMock:
    app_core = MagicMock(spec=ApplicationCore)
    app_core.logger = MagicMock(spec=logging.Logger)
    return app_core

@pytest.fixture
def sales_invoice_service(mock_db_manager: MagicMock, mock_app_core: MagicMock) -> SalesInvoiceService:
    return SalesInvoiceService(db_manager=mock_db_manager, app_core=mock_app_core)

@pytest.fixture
def sample_customer_orm() -> Customer:
    return Customer(id=1, customer_code="CUS001", name="Test Customer", created_by_user_id=1, updated_by_user_id=1)

@pytest.fixture
def sample_sales_invoice_orm(sample_customer_orm: Customer) -> SalesInvoice:
    return SalesInvoice(
        id=1, invoice_no="INV001", customer_id=sample_customer_orm.id, customer=sample_customer_orm,
        invoice_date=date(2023, 1, 15), due_date=date(2023, 2, 15),
        currency_code="SGD", total_amount=Decimal("109.00"), amount_paid=Decimal("0.00"),
        status=InvoiceStatusEnum.DRAFT.value, created_by_user_id=1, updated_by_user_id=1,
        lines=[
            SalesInvoiceLine(id=1, invoice_id=1, description="Item A", quantity=Decimal(1), unit_price=Decimal(100), line_total=Decimal(109), tax_amount=Decimal(9))
        ]
    )

# --- Test Cases ---

async def test_get_by_id_found(sales_invoice_service: SalesInvoiceService, mock_session: AsyncMock, sample_sales_invoice_orm: SalesInvoice):
    mock_session.execute.return_value.scalars.return_value.first.return_value = sample_sales_invoice_orm
    result = await sales_invoice_service.get_by_id(1)
    assert result == sample_sales_invoice_orm
    mock_session.execute.assert_awaited_once()

async def test_get_by_id_not_found(sales_invoice_service: SalesInvoiceService, mock_session: AsyncMock):
    mock_session.execute.return_value.scalars.return_value.first.return_value = None
    result = await sales_invoice_service.get_by_id(99)
    assert result is None

async def test_get_all_summary(sales_invoice_service: SalesInvoiceService, mock_session: AsyncMock, sample_sales_invoice_orm: SalesInvoice):
    mock_row = MagicMock()
    mock_row._asdict.return_value = { # Simulate RowMapping._asdict()
        "id": sample_sales_invoice_orm.id,
        "invoice_no": sample_sales_invoice_orm.invoice_no,
        "invoice_date": sample_sales_invoice_orm.invoice_date,
        "due_date": sample_sales_invoice_orm.due_date,
        "customer_name": sample_sales_invoice_orm.customer.name,
        "total_amount": sample_sales_invoice_orm.total_amount,
        "amount_paid": sample_sales_invoice_orm.amount_paid,
        "status": sample_sales_invoice_orm.status,
        "currency_code": sample_sales_invoice_orm.currency_code,
    }
    mock_session.execute.return_value.mappings.return_value.all.return_value = [mock_row]
    
    result_dtos = await sales_invoice_service.get_all_summary()
    assert len(result_dtos) == 1
    assert isinstance(result_dtos[0], SalesInvoiceSummaryData)
    assert result_dtos[0].invoice_no == "INV001"

async def test_save_new_invoice(sales_invoice_service: SalesInvoiceService, mock_session: AsyncMock, sample_customer_orm: Customer):
    new_invoice = SalesInvoice(
        customer_id=sample_customer_orm.id, invoice_date=date(2023, 3, 1), due_date=date(2023, 3, 31),
        currency_code="SGD", total_amount=Decimal("200.00"), status=InvoiceStatusEnum.DRAFT.value,
        created_by_user_id=1, updated_by_user_id=1
    )
    # Simulate what refresh would do after save
    async def mock_refresh(obj, attribute_names=None):
        obj.id = 10 # Simulate ID generated by DB
        obj.invoice_no = "INV002" # Simulate sequence generation
        obj.created_at = datetime.now()
        obj.updated_at = datetime.now()
        if attribute_names and 'lines' in attribute_names and not hasattr(obj, 'lines_loaded_flag'): # Mock simple line loading
             obj.lines = [SalesInvoiceLine(id=1, description="Test", quantity=1, unit_price=100, line_total=100)]
             obj.lines_loaded_flag = True
    mock_session.refresh.side_effect = mock_refresh

    result = await sales_invoice_service.save(new_invoice)
    
    mock_session.add.assert_called_once_with(new_invoice)
    mock_session.flush.assert_awaited_once()
    # Refresh will be called twice if lines are present and invoice.id is set
    assert mock_session.refresh.await_count >= 1 
    assert result.id == 10
    assert result.invoice_no == "INV002"

async def test_get_outstanding_invoices_for_customer(
    sales_invoice_service: SalesInvoiceService, mock_session: AsyncMock, sample_sales_invoice_orm: SalesInvoice
):
    # Make sample invoice outstanding
    sample_sales_invoice_orm.status = InvoiceStatusEnum.APPROVED.value
    sample_sales_invoice_orm.amount_paid = Decimal("50.00")
    sample_sales_invoice_orm.total_amount = Decimal("109.00")
    sample_sales_invoice_orm.invoice_date = date(2023, 1, 1)
    sample_sales_invoice_orm.due_date = date(2023, 1, 31)


    mock_session.execute.return_value.scalars.return_value.all.return_value = [sample_sales_invoice_orm]
    
    as_of = date(2023, 2, 1) # Invoice is overdue
    results = await sales_invoice_service.get_outstanding_invoices_for_customer(customer_id=1, as_of_date=as_of)

    assert len(results) == 1
    assert results[0].id == sample_sales_invoice_orm.id
    mock_session.execute.assert_awaited_once()
    # Can add more assertions on the query conditions if needed
